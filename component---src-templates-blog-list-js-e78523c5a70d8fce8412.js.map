{"version":3,"sources":["webpack:///./src/templates/blog-list.js","webpack:///./src/components/seo.js"],"names":["BlogIndex","render","data","this","props","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","edges","pageContext","currentPage","numPages","isFirst","isLast","prevPage","toString","nextPage","keywords","map","node","className","key","fields","slug","frontmatter","img","childImageSharp","fluid","to","style","backgroundImage","src","description","date","timeToRead","role","rel","React","Component","pageQuery","SEO","lang","meta","metaDescription","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps"],"mappings":"0bAMMA,E,gLACJC,OAAA,WAAU,IACAC,EAASC,KAAKC,MAAdF,KACFG,EAAYH,EAAKI,KAAKC,aAAaC,MACnCC,EAAQP,EAAKQ,kBAAkBC,MAH9B,EAI2BR,KAAKC,MAAMQ,YAArCC,EAJD,EAICA,YAAaC,EAJd,EAIcA,SACfC,EAA0B,IAAhBF,EACVG,EAASH,IAAgBC,EACzBG,EAAWJ,EAAc,GAAM,EAAI,KAAOA,EAAc,GAAGK,WAC3DC,GAAYN,EAAc,GAAGK,WAEnC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEV,MAAOH,EACPe,SAAU,CAAC,QAAD,qCAEXX,EAAMY,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACZ,OACE,6BAASC,UAAU,OAAOC,IAAKF,EAAKG,OAAOC,MACxCJ,EAAKK,YAAYC,KAChBN,EAAKK,YAAYC,IAAIC,iBACrBP,EAAKK,YAAYC,IAAIC,gBAAgBC,OACnC,kBAAC,OAAD,CACEC,GAAIT,EAAKG,OAAOC,KAChBH,UAAU,iBACVS,MAAO,CACLC,gBAAgB,OAAQX,EAAKK,YAAYC,IAAIC,gBAAgBC,MAAMI,IAApD,OAIvB,yBAAKX,UAAU,gBACb,wBAAIA,UAAU,cACZ,kBAAC,OAAD,CAAMQ,GAAIT,EAAKG,OAAOC,MAAOJ,EAAKK,YAAYnB,QAEhD,2BAAIc,EAAKK,YAAYQ,aACrB,0BAAMZ,UAAU,aACbD,EAAKK,YAAYS,KADpB,QAGA,0BAAMb,UAAU,cACbD,EAAKe,WADR,qBAQR,yBAAKd,UAAU,aACb,yBAAKA,UAAU,aAAae,KAAK,cAC/B,6BACIvB,GACA,2BACE,kBAAC,OAAD,CAAMgB,GAAId,EAAUsB,IAAI,OAAOhB,UAAU,eAAzC,oBAKJ,2BACE,0BAAMA,UAAU,eAAhB,QACQV,EADR,OACyBC,KAGzBE,GACA,2BACE,kBAAC,OAAD,CAAMe,GAAIZ,EAAUoB,IAAI,OAAOhB,UAAU,eAAzC,qB,GAhEMiB,IAAMC,WA6EfzC,YAER,IAAM0C,EAAS,c,4FCzEtB,SAASC,EAAT,GAAkD,IAAnCR,EAAkC,EAAlCA,YAAaS,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMrC,EAAS,EAATA,MAC9BF,EADuC,OACvCA,KAcFwC,EAAkBX,GAAe7B,EAAKC,aAAa4B,YAEzD,OACE,kBAAC,IAAD,CACEY,eAAgB,CACdH,QAEFpC,MAAOA,EACPwC,cAAa,QAAU1C,EAAKC,aAAaC,MACzCqC,KAAM,CACJ,CACEI,KAAK,cACLC,QAASJ,GAEX,CACEK,SAAS,WACTD,QAAS1C,GAEX,CACE2C,SAAS,iBACTD,QAASJ,GAEX,CACEK,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAAS5C,EAAKC,aAAa6C,QAE7B,CACEH,KAAK,gBACLC,QAAS1C,GAEX,CACEyC,KAAK,sBACLC,QAASJ,IAEXO,OAAOR,KAKfF,EAAIW,aAAe,CACjBV,KAAK,KACLC,KAAM,GACNV,YAAY,IAUCQ","file":"component---src-templates-blog-list-js-e78523c5a70d8fce8412.js","sourcesContent":["import React from 'react'\nimport { Link, graphql } from 'gatsby'\n\nimport DefaultLayout from '../components/layout'\nimport SEO from '../components/seo'\n\nclass BlogIndex extends React.Component {\n  render() {\n    const { data } = this.props\n    const siteTitle = data.site.siteMetadata.title\n    const posts = data.allMarkdownRemark.edges\n    const { currentPage, numPages } = this.props.pageContext\n    const isFirst = currentPage === 1\n    const isLast = currentPage === numPages\n    const prevPage = currentPage - 1 === 1 ? '/' : (currentPage - 1).toString()\n    const nextPage = (currentPage + 1).toString()\n\n    return (\n      <DefaultLayout>\n        <SEO\n          title={siteTitle}\n          keywords={[`story`, `children`, `moral`, `moralstories`]}\n        />\n        {posts.map(({ node }) => {\n          return (\n            <article className=\"post\" key={node.fields.slug}>\n              {node.frontmatter.img &&\n                node.frontmatter.img.childImageSharp &&\n                node.frontmatter.img.childImageSharp.fluid && (\n                  <Link\n                    to={node.fields.slug}\n                    className=\"post-thumbnail\"\n                    style={{\n                      backgroundImage: `url(${node.frontmatter.img.childImageSharp.fluid.src})`,\n                    }}\n                  />\n                )}\n              <div className=\"post-content\">\n                <h2 className=\"post-title\">\n                  <Link to={node.fields.slug}>{node.frontmatter.title}</Link>\n                </h2>\n                <p>{node.frontmatter.description}</p>\n                <span className=\"post-date\">\n                  {node.frontmatter.date}&nbsp;&nbsp;—&nbsp;\n                </span>\n                <span className=\"post-words\">\n                  {node.timeToRead} minute read\n                </span>\n              </div>\n            </article>\n          )\n        })}\n\n        <div className=\"container\">\n          <nav className=\"pagination\" role=\"pagination\">\n            <ul>\n              {!isFirst && (\n                <p>\n                  <Link to={prevPage} rel=\"prev\" className=\"newer-posts\">\n                    ← Previous Page\n                  </Link>\n                </p>\n              )}\n              <p>\n                <span className=\"page-number\">\n                  Page {currentPage} of {numPages}\n                </span>\n              </p>\n              {!isLast && (\n                <p>\n                  <Link to={nextPage} rel=\"next\" className=\"older-posts\">\n                    Next Page →\n                  </Link>\n                </p>\n              )}\n            </ul>\n          </nav>\n        </div>\n      </DefaultLayout>\n    )\n  }\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query blogPageQuery($skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          timeToRead\n          frontmatter {\n            date(formatString: \"YYYY, MMM DD\")\n            title\n            description\n            index\n            img {\n              childImageSharp {\n                fluid(maxWidth: 3720) {\n                  aspectRatio\n                  base64\n                  sizes\n                  src\n                  srcSet\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { useStaticQuery, graphql } from 'gatsby'\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}